// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL") // uses connection pooling
}

model User {
  id             Int      @id @default(autoincrement())
  userName       String   @unique
  email          String?  @unique
  hashedPassword String
  firstName      String? //can be null
  middleName     String? //can be null
  lastName       String?
  address        String? //can be null
  city           String? //can be null
  country        String? //can be null
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  photoUrl       String? //can be null

  scheduleIdInUse Int? //can be null

  deviceId Int? @unique //can be null @unique @unique
  deviceAccessToken String? //can be null

  //relationship
  schedules Schedule[]
  histores  History[]

  @@map("users") //users id "table's name" in Postgres SQL
}

model Schedule {
  id             Int     @id @default(autoincrement())
  title          String
  plantName      String?
  description    String?
  numberOfViews  Int     @default(0)
  numberOfCopies Int     @default(0)
  isPublic       Boolean @default(true)
  isActive       Boolean @default(true)
  imageData      String?
  numberOfDates  Int     @default(0)

  longitude Float? //can be null
  latitude  Float? //can be null

  moistureThreshold    Float @default(-1)
  temperatureThreshold Float @default(-1)
  ecThreshold          Float @default(-1)
  pHThreshold          Float @default(-1)
  nThreshold           Float @default(-1)
  pThreshold           Float @default(-1)
  kThreshold           Float @default(-1)

  createAt        DateTime @default(now())
  updateAt        DateTime @updatedAt
  updateContentAt DateTime @default(now())

  // relationship
  userId Int //foreign key
  user   User @relation(fields: [userId], references: [id])

  // relationship with day
  slots    Slot[]
  histores History[]

  @@map("schedules")
}

// model Day {
//   id    Int     @id @default(autoincrement())
//   title String?

//   // relationship
//   scheduleId Int //foreign key
//   schedule   Schedule @relation(fields: [scheduleId], references: [id])

//   // relationship with Slot
//   slots Slot[]

//   @@map("days")
// }

model Slot {
  id         Int      @id @default(autoincrement())
  startTime  String // hh:mm
  endTime    String // hh:mm
  // relationship
  scheduleId Int
  schedule   Schedule @relation(fields: [scheduleId], references: [id])

  slotStatuses SlotStatus[]

  @@map("slots")
}

model SlotStatus {
  id Int @id @default(autoincrement())

  date                DateTime   @default(now())
  dateIndexInSchedule Int        @default(1)
  status              StatusSlot @default(NOT_YET)

  updateAt DateTime @updatedAt

  // relationship
  // relationship
  slotId Int
  slot   Slot @relation(fields: [slotId], references: [id])

  @@map("slotStatuses")
}

enum StatusSlot {
  NOT_YET
  DONE
  ERROR
  CANCEL
  UNKNOWN
}

model History {
  id          Int      @id @default(autoincrement())
  startTime   DateTime @default(now())
  endTime     DateTime @updatedAt
  isCompleted Boolean  @default(false)
  progress    Float    @default(0)

  userId     Int // foreign key
  scheduleId Int // foreign key

  user     User     @relation(fields: [userId], references: [id])
  schedule Schedule @relation(fields: [scheduleId], references: [id])

  @@map("histories")
}

// model Admin {
//   id        Int      @id @default(autoincrement())
//   userName  String   @unique
//   password  String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map("admins")
// }

model Device {
  id           Int      @id @default(autoincrement())
  name         String   @default("New Device")
  description  String?
  macAddress   String?
  serialNumber String?
  systemInfo   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  userId Int? @unique //can be null @unique
  

  @@unique([macAddress, serialNumber])
  @@map("devices")
}

model Key {
  id        Int      @id @default(autoincrement())
  name      String
  key       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("keys")
}
